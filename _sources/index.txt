Bluesky Data Collection Interface
=================================

Bluesky is Python package for interactive data collection. There are three
components:

* *Messages,* simple, single-step instructions,
* a *Run Engine,* which processes the messages and coordinates collection, 
* and *Documents*, Python dictionaries containing data and metadata, organized
  in a
  `specified but flexible <http://nsls-ii.github.io/arch/metadatastore-format.html>`__
  way.

Key Features
------------

Programmable Scans
++++++++++++++++++

* Running can be cleanly **paused and later aborted or resumed** at
  user-defined checkpoints.
* Scans can automatically supend and resume in response to external conditions.
* In addition to the built-in scans, you can specify **custom scans and 
  "macros"** in a simple, procedural way using basic Python sytnax (e.g.,
  for-loops) and a small set of commands. There are many documented examples.
* You can register **custom commands**---say, to control your robot---and
  immediately integrate them with existing ones.
* You can write your own high-level **"motors" that control many PVs**. Examples
  include coordinated motion and controllers that don't map onto a continuous
  single-axis motor.

Powerful Features with Working Examples
+++++++++++++++++++++++++++++++++++++++

* Highly customizable **live plotting** and other real-time processing
  pipelines are possible. Useful working examples are included.
* **Adaptive scans** can sample fast-changing regions more. There are
  ready-to-use functions and examples for writing your own.
* Optional **automatic data export** at the end of each run. This paves the way
  for prompt HPC.

Robustness
++++++++++

* Every Document undergoes **validation** to ensure immediate feedback in
  the event of trouble. Additional, customized data validation is possible.
* Strong code coverage by automated **tests** ensures stability.

Relationship to EPICS, pyepics, ophyd
-------------------------------------

Bluesky assumes a high-level abstraction and expects Python objects that have
methods like 'read' and 'set'. Bluesky is agnostic about exactly how this
interaction is implemented.

Relationship to DataBroker, metadatastore, filestore
----------------------------------------------------

The Documents generated by bluesky conform to the specification expected by
metadatastore. However, integration with metadatastore is not required or
assumed. Other storage or processing pipelines can be used alongside or in
place of metadatastore.

Integration with filestore is handled by individual detector interfaces, such as
``AreaDetector``.

At NSLS-II, it is expected that bluesky will be operating with metadatastore
and filestore. An optional module called ``standard_config`` can be used to
conveniently hook data collection into metadatastore. Collected data will
become immediately available through DataBroker.

Contents
--------

.. toctree::
   :maxdepth: 1

   simple_api
   scans
   callbacks
   state-machine
   metadata 
   custom-scans
   object_api
   nsls2_checklist
