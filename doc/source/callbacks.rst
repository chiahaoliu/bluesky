Live Feedback using Subscriptions
=================================

.. ipython:: python
   :okwarning:
   :suppress:

   from bluesky.examples import det1, det2, det3, det, motor
   from bluesky.callbacks import LiveTable, print_metadata
   from bluesky import RunEngine
   RE = RunEngine()
   RE.verbose = False
   RE.memory['owner'] = 'Jane'
   RE.memory['beamline_id'] = 'demo'
   from bluesky.scans import Count

As the RunEngine processes instructions, it creates *Documents,* plain Python
dictionaries organized in a
`specified but flexible <http://nsls-ii.github.io/arch/metadatastore-format.html>`__
way. These Documents contain
the data and metadata generated by the scan. Each time a new Document is
created, the RunEngine passes it to a list of functions. These functions can
do anyting: store the data to disk, transfer the data to a cluster,
update a plot, print a message, etc. They are called subscriptions or
callbacks.

Built-in subscriptions
----------------------

Bluesky includes a couple functions that make useful subscriptions.

In the standard_configuration, one critical subscription is configured at
startup time: a subscription that saves the Documents to metadatastore.

Other subscriptions are left up to the user, but if you find yourself using
one every time, you can add it to a start-up script or an IPython profile.

Live table
++++++++++

As demonstrated in the :doc:`example workflow <workflow>`, a live-updating
table shows results as they come in.

.. ipython:: python

    from bluesky.scans import Ascan
    scan = Ascan(motor, [det1, det2, det3], [1,2,4,8])
    table = LiveTable(['det1', 'det2', 'det3'])

.. ipython:: python

    RE(scan, {'all': table})

All documents created by this scan are passed to LiveTable, which uses
them to print a table. As you can see, we specify the detectors---LiveTable
does not guess them---so we can focus on specific columns and avoid overly-wide
tables.

.. ipython:: python

    RE(scan, {'all': LiveTable(['det2'])})

To use a subscription by default, without typing it every time, subscribe it
to the RunEngine.

.. ipython:: python

    RE.subscribe('all', table)  # Subscribe table to all future runs.
    RE(scan)

The return value from ``subscribe`` is an integer token which we can use to
unsubscribe later.

.. ipython:: python

    RE.unsubscribe(2)


Live plot
+++++++++

Post-scan Export
++++++++++++++++

Post-scan Validation
++++++++++++++++++++

Writing your own
----------------

Simplest Example
++++++++++++++++

Using multiple document types
+++++++++++++++++++++++++++++

Critical Subscriptions
----------------------
